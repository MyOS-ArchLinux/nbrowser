#!/usr/bin/env bash
# nbrowser v0.7
# Requires bash 4+
# author : odnar-dev <https://github.com/odnar-dev>
# source : https://github.com/MyOS-ArchLinux/nbrowser
# license: GPLv3 <https://gnu.org/licenses/gpl-3.0.html>
# shellcheck disable=SC2190,SC2086,SC1091

NBROWSER_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/nbrowser"
NBROWSER_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/nbrowser"
NBROWSER_DEFAULT_SEARCH=${NBROWSER_DEFAULT_SEARCH:-duckduckgo}
COPY_TO_CLIPBOARD_OPTION=${COPY_TO_CLIPBOARD_OPTION:-true}
NBROWSER_SIMPLE_URL_HANDLER=${NBROWSER_SIMPLE_URL_HANDLER:-false}

declare -A ENGINES

ENGINES=(
	["google"]="https://www.google.com/search?q="
	["g"]="https://www.google.com/search?q="
	["duckduckgo"]="https://duckduckgo.com/?q="
	["ddg"]="https://duckduckgo.com/?q="
	["startpage"]="https://www.startpage.com/do/search?query="
	["sp"]="https://www.startpage.com/do/search?query="
	["archwiki"]="https://wiki.archlinux.org/index.php?title=Special:Search&search="
	["aur"]="https://aur.archlinux.org/packages/?O=0&SeB=nd&outdated=&SB=n&SO=a&PP=50&do_Search=Go&K="
	["github"]="https://github.com/search?q="
	["git"]="https://github.com/search?q="
	["imdb"]="https://www.imdb.com/find?q="
	["tmdb"]="https://www.themoviedb.org/search?query="
	["tvdb"]="https://www.thetvdb.com/search?query="
	["mal"]="https://myanimelist.net/search/all?q="
	["youtube"]="https://www.youtube.com/results?search_query="
	["ytb"]="https://www.youtube.com/results?search_query="
)

FIREFOX_BASED_BROWSERS=(librewolf firefox floorp icecat palemoon firedragon)
CHROMIUM_BASED_BROWSERS=(google-chrome-stable chromium brave vivaldi-stable opera)

has() {
	case "$(command -v "$1" 2>/dev/null)" in
		alias*|"") return 1
	esac
}

_pemx() {
	rofi -e "error: $1"
	exit 1
}

_notify(){
	rofi -e "$@"
}

_choose(){
	[ -z "${2}" ] || local ROFI_ADD_ARGS=${2:-}
	rofi -dmenu -i -p 'Select Item ' -theme-str 'window {width: 95%;}' -l 10 -no-click-to-exit ${ROFI_ADD_ARGS:-} -filter "${1:-}"
}

_input(){
	[ -z "${2}" ] || local ROFI_ADD_ARGS="-mesg \"${2//&/&amp;}\""
	rofi -l 0 -width 50 -p "${1:-input}" -dmenu ${ROFI_ADD_ARGS:-}
}

listfiles(){
	for file in "${NBROWSER_CONFIG_DIR}/$1"/*; do
		[ -e "$file" ] || [ -L "$file" ] || continue
		[ -s "$file" ] && printf '%s\n' "${file##*/}"
	done
}

# check if necessary programs are installed
if ! has 'rofi'; then
	notify-send "nbrowser: rofi is not installed in your system!"
	exit 1
fi

# check for installed browsers
## keep the first place to special action
browser_count=1

add_browser(){
	local browser_name="${1:?}"
	local browser_path="${2:?}"
	browser_count=$((browser_count+1))
	installed_browsers[$browser_count]="${browser_name:?}	:	${browser_path:?}"
}

## firefox based browser
for prog in ${FIREFOX_BASED_BROWSERS[*]}; do
	if has "$prog" ; then
		add_browser "$prog" "$(command -v $prog)"
		add_browser "$prog [Private]" "$(command -v $prog) --private-window"
	fi
done

## chromium based browser
for prog in ${CHROMIUM_BASED_BROWSERS[*]}; do
	if has "$prog" ; then
		add_browser "$prog" "$(command -v $prog)"
		# add private window
		add_browser "$prog [Private]" "$(command -v $prog) --incognito"
	fi
done

## other browsers
for prog in badwolf qutebrowser ephemeral ; do
	if has "$prog" ; then
		add_browser "$prog" "$(command -v $prog)"
	fi
done

# custom config
[ -f "${NBROWSER_CONFIG_DIR}/config" ] && source "${NBROWSER_CONFIG_DIR}/config"

if ! has _clean_url ;then
	_clean_url(){
		local IN="${*// /+}"
		local OUT=""
		IN="${IN//&amp;/&}"
		IN=$(printf '%b\n' "${IN//%/\\x}")
		IN="${IN// /+}"
		parameters=$(echo "${IN}" | tr "&|?" "\n")
		if [ ! "$(echo "$parameters" | wc -l)" == "1" ] ;then
			for parameter in $parameters; do
				parameter_count=$((parameter_count+1))
				case "$parameter" in
					utm_*|ga_source*|ga_medium*|ga_term*|ga_campaign*|ga_content*|ga_place*|ga_*|gclid*|gclsrc*|fb_action_ids*|referer=*|\
					fb_action_types*|fb_ref*|fb_source*|fbclid*|fbadid*|gs_l*|otm_*|cmpid*|os_ehash*|hmb_campaign*|hmb_medium*| \
					hmb_source*|ref_*|yclid*|action_object_map*|action_type_map*|action_ref_map*|mkt_tok*|amp=1|stm_*|ref=*| \
					_hsenc*|_hsmi*|igshid*|mc_cid*|mc_eid*|oly_anon_id*|oly_enc_id*|otc*|wickedid*|soc_src*|soc_trk*|_openstat*|ICID*|rb_clickid*|via*|sref=*)
						;;
					*)	[ "$parameter_count" == 1 ] && OUT="$OUT$parameter?" || OUT="$OUT$parameter&"
						;;
				esac
			done
			OUT=${OUT%?}
		else
			OUT="$IN"
		fi
		echo "$OUT"
	}
fi

if ! has _copy_to_clipboard ;then
	_copy_to_clipboard(){
		printf '%s\n' "$@" | xclip -selection clipboard ;
	}
fi

open_a_browser(){
	selected_browser=$(printf "%s\n" "${installed_browsers[@]}" | awk '!a[$0]++' | awk 'BEGIN { RS="\n"; FS="	:	" } { print $1 "\t : " $2 }'| column -t -s $'\t' | rofi -dmenu -p 'nbrowser' -i -format "i s" -l "$((browser_count-1))")

	[ -z "${selected_browser}" ] && exit 0

	case "${selected_browser}" in
		"-1 "*)
			main ${selected_browser/-1 }
			;;
		*)
			selected_browser=$(printf '%s' "${selected_browser}" | awk '{split($0,a,": "); print a[2]}')
			{ setsid -f $(bash -c "exec ${selected_browser}") >/dev/null 2>&1 ; }
			;;
	esac
}

open_video_with(){
	selected_action=$(printf '%s\n' "Play" "Download" "Open in Browser" | rofi -dmenu -p 'Open Video with' -mesg "${@//&/&amp;}" -i -l 3)

	case "$selected_action" in
		"Play")
			if [ -n "${NBROWSER_PLAYER}" ] ; then
				{ setsid -f ${NBROWSER_PLAYER} "$*" >/dev/null 2>&1 ; }
			elif has 'mpv'; then
				{ setsid -f mpv "$*" >/dev/null 2>&1 ; }
			elif has 'vlc'; then
				{ setsid -f vlc "$*" >/dev/null 2>&1 ; }
			else
				_pemx "mpv is not installed in your system!"
			fi
			;;
		"Download")
			if [ -n "${NBROWSER_DOWNLOADER}" ] ; then
				{ setsid -f ${NBROWSER_DOWNLOADER} "$*" >/dev/null 2>&1 ; }
			elif has 'yt-dlp'; then
				{ setsid -f "${TERMINAL:-st}" -e sh -c "yt-dlp $* || read" >/dev/null 2>&1 ; }
			elif has 'youtube-dl'; then
				{ setsid -f "${TERMINAL:-st}" -e sh -c "youtube-dl $* || read" >/dev/null 2>&1 ; }
			else
				_pemx "youtube-dl is not installed in your system!"
			fi
			;;
		"Open in Browser")
			open_in_browser "$1"
			;;
	esac
}

open_picture_with(){
	selected_action=$(printf '%s\n' "View" "Edit with Gimp" "Open in Browser" | rofi -dmenu -p 'Open Picture with' -mesg "${@//&/&amp;}" -i -l 3)

	case "$selected_action" in
		"View")
			if has 'sxiv'; then
				curl -sL "$1" > "/tmp/$(echo "$@" | sed "s/.*\///;s/%20/ /g")" && \
				{ setsid -f sxiv -a "/tmp/$(echo "$@" | sed "s/.*\///;s/%20/ /g")" >/dev/null 2>&1 ; }
			elif has 'feh'; then
				{ setsid -f feh "$*" >/dev/null 2>&1 ; }
			else
				_pemx "sxiv is not installed in your system!"
			fi
			;;
		"Edit with Gimp")
			if has 'gimp'; then
				{ setsid -f gimp "$*" >/dev/null 2>&1 ; }
			else
				_pemx "gimp is not installed in your system!"
			fi
			;;
		"Open in Browser")
			open_in_browser "$1"
			;;
	esac
}

open_in_browser(){
	case "$1" in
		"-m")
			local MULTI_URL=true;shift
			;;
	esac

	if [ "${BROWSER_FG_FIRST}" = true ]; then
		if [ "${XDG_SESSION_TYPE}" = "wayland" ]; then
			current_win_name=$(swaymsg -t get_tree | jq -r '..|try select(.focused == true)|.window_properties.instance')
		else
			current_win_id=$(xdotool getactivewindow)
			current_win_pid=$(xdotool getwindowpid "$current_win_id" )
			current_win_name=$(ps -o comm= -p "$current_win_pid" || xdotool getwindowname "$current_win_id" )
		fi
		current_browser=$(printf "%s\n" "${installed_browsers[@]}" | awk -v current_win_name="${current_win_name:-}" 'BEGIN { RS="\n"; FS="	:	" } $1 ~ current_win_name {p=1; exit} END {if(p) print $1 "\t:\t" $2 }')
		[ ! -z "${current_browser}" ] && installed_browsers[0]="${current_browser:-}"
	fi
	# add clipboard
	if [ "${COPY_TO_CLIPBOARD_OPTION}" = true ]; then
		browser_count=$((browser_count+1))
		installed_browsers[$browser_count]="Copy to clipboard"
		COPY_TO_CLIPBOARD_OPTION=false
	fi

	selected_browser=$(printf "%s\n" "${installed_browsers[@]}" | awk '!a[$0]++' | awk 'BEGIN { RS="\n"; FS="	:	" } { print $1 "\t : " $2 }'| column -t -s $'\t' | rofi -dmenu -p 'Open URL with' -mesg "${@//&/&amp;}" -i -l "$((browser_count-1))" )

	[ -z "${selected_browser}" ] && exit 0

	case "${selected_browser}" in
		"!"*)
			if [ -f "${NBROWSER_CONFIG_DIR}/ubangs/${selected_browser/?}" ] ; then
				source "${NBROWSER_CONFIG_DIR}/ubangs/${selected_browser/?}"
				has nbrowser_ubang || _pemx "couldn't find nbrowser_ubang() function in ${NBROWSER_CONFIG_DIR}/ubangs/${selected_browser/?}"
				nbrowser_ubang "$*"
			elif [[ "${selected_browser/?}" == "p" ]] ; then
				open_video_with "$*"
			else
				ubang=$(listfiles ubangs | rofi -dmenu -p 'ubangs' -i -mesg "ubangs '${selected_browser/?}' not found!")
				[ -z "${ubang}" ] && exit
				source "${NBROWSER_CONFIG_DIR}/ubangs/${ubang}"
				has nbrowser_ubang || _pemx "couldn't find nbrowser_ubang() function in ${NBROWSER_CONFIG_DIR}/ubangs/${ubang}"
				nbrowser_ubang "$*"
			fi
			;;
		"Copy to clipboard"*": ")
			_copy_to_clipboard "$*"
			;;
		*)
			selected_browser=$(printf '%s' "${selected_browser}" | awk '{split($0,a,": "); print a[2]}')
			if [ "${MULTI_URL}" = true ]; then
				{ setsid -f ${selected_browser} $* >/dev/null 2>&1 ; }
			else
				{ setsid -f $(bash -c "exec ${selected_browser} \"$*\"") >/dev/null 2>&1 ; }
			fi
			;;
	esac
}

url_handler(){
	cleanurl=$(_clean_url "$*")
	cleanurl=${cleanurl:-$1}
	local domain=$(echo "$cleanurl" | awk -F \/ '{l=split($3,a,"."); print (a[l-1]=="com"?a[l-2] OFS:X) a[l-1] OFS a[l]}' OFS=".")
	if [ -f "${NBROWSER_CONFIG_DIR}/dbangs/${domain}" ] ; then
		source "${NBROWSER_CONFIG_DIR}/dbangs/${domain}"
		has nbrowser_dbang || _pemx "couldn't find nbrowser_dbang() function in ${NBROWSER_CONFIG_DIR}/dbangs/${domain}"
		nbrowser_dbang "$cleanurl"
	elif [ "${NBROWSER_SIMPLE_URL_HANDLER}" = true ]; then
		open_in_browser "$cleanurl"
	else
		case "$cleanurl" in
			**ted.com/**|*youtube.com/watch*|*youtube.com/playlist*|*youtu.be*|*//www.twitch.tv/*|*//twitch.tv/*|*.mp4|*.mkv|*.webm|*.mp3|*.flac|*.opus|*mp3?source*|*gifv|*.m3u|*.m3u8)
				open_video_with "$cleanurl"
				;;
			*png|*jpg|*jpe|*jpeg|*gif|*.jpg\?r=*)
				open_picture_with "$cleanurl"
				;;
			*)
				open_in_browser "$cleanurl"
				;;
		esac
	fi
}

main(){
	[ -z "$1" ] && return

	local arg="$*"

	# check if arg is a file or a dir
	if [[ -e "${arg}" ]]; then
		case "${arg}" in
			*.pdf)
				[ -z "${NBROWSER_PDF_VIEWER}" ]	|| installed_browsers[0]="PDF Reader	:	${NBROWSER_PDF_VIEWER}"
				;;
			*)
				[ -z "${NBROWSER_HTML_EDITOR}" ] || installed_browsers[0]="Text Editor	:	${NBROWSER_HTML_EDITOR}"
				;;
		esac
		open_in_browser "$*"
		return
	fi

	# check for protocols
	if [[ "${arg}" =~ ^([a-zA-Z0-9]+):(//|\?|\+) ]]; then
		local protocol="${BASH_REMATCH[1]}"
		local protocol_small=${protocol,,}
		if has "${protocol}_protocolhandler" ; then
			"${protocol}_protocolhandler" "${arg/"$protocol://"}"
		elif has "${protocol,,}_protocolhandler" ; then
			"${protocol_small}_protocolhandler" "${arg/"$protocol://"}"
		else
			case "${protocol_small:-$protocol}" in
				mpv|vlc|freetube|play)
					open_video_with ${arg/"$protocol://"}
					;;
				browser)
					url_handler ${arg/"$protocol://"}
					;;
				nbrowser)
					arg=$(echo "$*" | sed "s/%20/ /g")
					echo $arg
					nbrowser ${arg/"$protocol://"}
					;;
				*)
					url_handler "${arg}"
					;;
			esac
		fi
		return
	fi

	# check for bangs
	if [[ "${arg}" =~ ^\!([a-zA-Z0-9=?-]*) ]]; then
		local bang="${BASH_REMATCH[1]}"
		shift
		if [ ! -f "${NBROWSER_CONFIG_DIR}/bangs/${bang}" ] ; then
			bang=$(listfiles bangs | rofi -dmenu -p 'bangs' -i -mesg "bang '${bang:-$arg}' not found!")
		fi
		[ -z "${bang}" ] && exit
		source "${NBROWSER_CONFIG_DIR}/bangs/${bang}"
		has nbrowser_bang || _pemx "couldn't find nbrowser_bang() function in ${NBROWSER_CONFIG_DIR}/bangs/${bang}"
		nbrowser_bang "$*"
		return
	fi

	# check for engines
	if [[ "${arg}" =~ ^\?([a-zA-Z0-9-]*) ]]; then
		local engine="${BASH_REMATCH[1]}"
		local engineURL=""
		shift
		local searchQuery="$*"
		# if engine in local file
		if [ -f "${NBROWSER_CONFIG_DIR}/engines/${engine}" ] ; then
			source "${NBROWSER_CONFIG_DIR}/engines/${engine}"
			has nbrowser_search || _pemx "couldn't find nbrowser_search() function in ${NBROWSER_CONFIG_DIR}/engines/${engine}"
		# if engine in config file
		elif [ -n "${ENGINES[${engine:- }]}" ]; then
			engineURL=${ENGINES[$engine]}
			nbrowser_search(){
				echo "${2:?}${1:?}"
			}
		# if engine in engines.json
		elif [ -f "${NBROWSER_CONFIG_DIR}/engines.json" ]; then
			local engineURL=$(jq -r ".[]|select( .t == \"$engine\" )|.u" "$NBROWSER_CONFIG_DIR/engines.json")
			local engineName=$(jq -r ".[]|select( .t == \"$engine\" )|.s" "$NBROWSER_CONFIG_DIR/engines.json")
			if [ -n "${engineURL}" ] ; then
				nbrowser_search(){
					echo "${2:?}" | sed "s/{{{s}}}/${1:?}/g"
				}
			fi
		fi

		if has nbrowser_search; then
			[ -z "${searchQuery}" ] && searchQuery=$(_input "${engineName:-$engine} Search" "${engineURL:-}")
			[ -n "${searchQuery}" ] || return
			if [ -z "${engineURL}" ] ; then
				url_handler "$(nbrowser_search "${searchQuery}")"
			else
				url_handler "$(nbrowser_search "${searchQuery}" "${engineURL}")"
			fi
		else
			local ENGINESLIST="$(listfiles engines)"
			ENGINESLIST+=" ${!ENGINES[@]}"
			[ -f "${NBROWSER_CONFIG_DIR}/engines.json" ] && ENGINESLIST+=" $(jq -r ".[]|.t" "$NBROWSER_CONFIG_DIR/engines.json")"
			engine=$(printf "%s\n" ${ENGINESLIST} | awk '!a[$0]++' | rofi -dmenu -p 'engines' -i -mesg "engine '${engine}' not found!")
			[ -z "${engine}" ] && return
			main "?${engine}" "${searchQuery}"
		fi
		return
	fi

	# check for shortcuts
	if [[ "${arg}" =~ ^([A-Za-z0-9-]+)/. ]]; then
		local shortcut="${BASH_REMATCH[1]}"
		if has "${shortcut}_shortcut" ; then
			"${shortcut}_shortcut" "${arg/"$shortcut/"}"
			return
		fi
	fi

	# check for domain
	if [[ "${arg}" =~ ^([A-Za-z0-9.-]{1,63}\.)+[A-Za-z0-9-]{1,}$ ]]; then
		url_handler "http://${arg}"
		return
	fi

	# use dafault search engine
	if [ -f "${NBROWSER_CONFIG_DIR}/engines/${NBROWSER_DEFAULT_SEARCH}" ] ; then
		source "${NBROWSER_CONFIG_DIR}/engines/${NBROWSER_DEFAULT_SEARCH}"
		has nbrowser_search || _pemx "couldn't find nbrowser_search() function in ${NBROWSER_CONFIG_DIR}/engines/${NBROWSER_DEFAULT_SEARCH}"
		url_handler "$(nbrowser_search $*)"
	elif [ -n "${ENGINES[$NBROWSER_DEFAULT_SEARCH]}" ]; then
		url_handler "${ENGINES[$NBROWSER_DEFAULT_SEARCH]}$*"
	else
		url_handler "https://duckduckgo.com/?q=$*"
	fi
}

if [ -z "$1" ]; then
	open_a_browser;
else
	# remove space from the start and the end of query
	query=${*#${*%%[![:space:]]*}}
	query=${query%${query##*[![:space:]]}}
	main ${query}
fi
